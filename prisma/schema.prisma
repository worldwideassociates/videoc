datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  email2        String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Common fields
  address         String?
  city            String?
  postalCode      String?
  region          String?
  country         String?
  role            Role?
  phone           String?
  phone2          String?
  fax             String?
  dateOfBirth     DateTime?
  department      Department? @relation("DepartmentMembers", fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId    String?
  position        String?
  activeMeetingId String?

  // Customer fields
  localTaxOffice String?
  profession     String?
  vatNumber      String?
  websiteUrl     String?
  logo           String?

  // Employee fields

  // Collaborator fields

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meetings  Invite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CUSTOMER
  ADMIN
  EMPLOYEE
  SUPER_ADMIN
  COLLABORATOR
}

model Company {
  id                String   @id @default(cuid())
  singleton         String   @unique @default("singleton")
  name              String?
  vatNumber         String?
  localTaxOffice    String?
  companyProfession String?
  address           String?
  city              String?
  postalCode        String?
  region            String?
  country           String?
  websiteUrl        String?
  accountingEmail   String?
  generalEmail      String?
  phone             String?
  alternativePhone  String?
  companyLogo       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  serialNumber      String
}

model Department {
  id   String @id @default(cuid())
  name String @unique

  description String?
  email       String?
  phone       String?
  members     User[]   @relation("DepartmentMembers") // One-to-many relation
  managerId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaxOffice {
  id      String @id @default(cuid())
  name    String
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meeting {
  id            String         @id @default(cuid())
  title         String
  description   String?
  startDateTime DateTime
  status        MEETING_STATUS @default(PLANNED)

  hostId String

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  invites    Invite[]
  recordings Recording[]
}

model Invite {
  id        String  @id @default(cuid())
  meetingId String
  userId    String
  token     String
  isHost    Boolean @default(false)
  isActive  Boolean @default(false)

  meeting Meeting @relation(fields: [meetingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Upload {
  id        String        @id @default(cuid())
  type      Role
  url       String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    UPLOAD_STATUS @default(PROCESSING)
}

model Recording {
  id        String   @id @default(cuid())
  url       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])
}

enum UPLOAD_STATUS {
  PROCESSING
  PROCESSED
}

enum MEETING_STATUS {
  PLANNED
  CANCELED
  RESCHEDULED
}
