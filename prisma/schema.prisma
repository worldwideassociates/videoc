datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?
  phone         String?
  dateOfBirth   DateTime?
  department    Department? @relation("DepartmentMembers", fields: [departmentId], references: [id])
  departmentId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CUSTOMER
  ADMIN
  EMPLOYEE
  SUPER_ADMIN
}

model Company {
  id                Int      @id @default(autoincrement())
  singleton         String   @unique @default("singleton")
  name              String?
  vatNumber         String?
  localTaxOffice    String?
  companyProfession String?
  address           String?
  city              String?
  postalCode        String?
  region            String?
  country           String?
  webkitURL         String?
  accountingEmail   String?
  generalEmail      String?
  phone             String?
  alternativePhone  String?
  companyLogo       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique

  description String?
  email       String?
  phone       String?
  members     User[]   @relation("DepartmentMembers") // One-to-many relation
  managerId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
